import json
import telebot
from Key import KEY
from telebot import types

class QuizBot:
    def __init__(self, token, data_file):
        self.bot = telebot.TeleBot(token)
        self.quiz_started = False
        self.user_responses = []
        self.token = token
        self.data_file = data_file
        with open(data_file, 'r', encoding='utf-8') as file:
            self.data = json.load(file)


    def start(self):
        @self.bot.message_handler(commands=['start'])
        def start(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            self.bot.send_message(message.chat.id,
                                  "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. "
                                  "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É? –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /quiz, –∏ –º—ã –Ω–∞—á–Ω–µ–º! üêæ", reply_markup=markup)


        @self.bot.message_handler(commands=['quiz'])
        def start_quiz_from_command(message):
            if not self.quiz_started:
                self.quiz_started = True
                self.user_responses.clear()
                self.send_next_question(message.chat.id)
            else:
                self.bot.send_message(message.chat.id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞.")


        @self.bot.callback_query_handler(func=lambda call: call.data == 'start_feedback')
        def start_feedback_handler(call):
            chat_id = call.message.chat.id
            self.bot.send_message(chat_id, "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:")
            self.bot.register_next_step_handler(call.message, save_feedback_handler)

        @self.bot.message_handler(func=lambda message: message.text and message.text.strip() != '' and message.text != '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤' and not self.quiz_started)
        def save_feedback_handler(message):
            chat_id = message.chat.id
            if message.text:
                feedback_data = {'feedback_text': message.text}
                with open('feedback.json', 'a', encoding='utf-8') as file:
                    file.write(json.dumps(feedback_data, ensure_ascii=False) + '\n')
                    self.bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
            else:
                self.bot.send_message(chat_id, "–û—Ç–∑—ã–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤.")

        @self.bot.message_handler(content_types=['text'])
        def check_answer(message):
            if self.quiz_started:
                if message.text.isdigit():
                    user_answer_index = int(message.text) - 1
                    if 0 <= user_answer_index <= 3:
                        self.user_responses.append(user_answer_index)
                        self.send_next_question(message.chat.id)
                    else:
                        self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç 1 –¥–æ 4.")
                else:
                    self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç 1 –¥–æ 4.")
            else:
                self.bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /quiz.")

        @self.bot.message_handler(content_types=['voice', 'audio', 'document', 'photo'])
        def handle_not_allowed_content(message):
            self.bot.reply_to(message,
                              "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∞—É–¥–∏–æ, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç 1 –¥–æ 4.")

    def send_next_question(self, chat_id):
            if len(self.user_responses) < len(self.data['questions']):
                question = self.data['questions'][len(self.user_responses)]
                self.bot.send_message(chat_id, question['question'])
                for index, option in enumerate(question['options']):
                    self.bot.send_message(chat_id, f"{index + 1}. {option}")
            else:
                self.calculate_result(chat_id)

    def send_try_again_button(self, chat_id):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑', callback_data='try_again'))
        markup.add(types.InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–∞', callback_data='contact_employee'))
        markup.add(types.InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data='start_feedback'))
        self.bot.send_message(chat_id,
                              "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑, —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ?",
                              reply_markup=markup)

    def handle_try_again_button(self, message, chat_id):
        if message.text == "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑":
            self.bot.delete_message(chat_id, message.message_id)
            self.bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.")
            self.quiz_started = False
            self.user_responses = []
            self.send_next_question(chat_id)


    def calculate_result(self, chat_id):
        if len(self.user_responses) == len(self.data['questions']):
            total_score = 0
            for index, response in enumerate(self.user_responses):
                question = self.data['questions'][index]
                points_for_response = question['points'][response]
                total_score += points_for_response
            result_message = "–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "
            url = "https://moscowzoo.ru/my-zoo/become-a-guardian/"

            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ "results.json"
            try:
                with open('results.json', 'r', encoding='utf-8') as file:
                    data = json.load(file)
            except FileNotFoundError:
                data = {"results": []}
            # –ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for result in data["results"]:
                if result["user_id"] == chat_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    result["score"] = total_score
                    break
            else:
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                user_result = {
                    "user_id": chat_id,
                    "score": total_score,
                }
                data["results"].append(user_result)
            # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª "results.json"
            with open('results.json', 'w', encoding='utf-8') as file:
                json.dump(data, file, ensure_ascii=False, indent=4)
            if 24 <= total_score <= 26:
                animal = "–ú–µ–¥–æ–µ–¥"
                photo = open('Foto/medoed.jpg', 'rb')
                self.bot.send_photo(chat_id, photo,
                                    caption=result_message + animal + f" –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ /quiz. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã [–ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ]({url})",
                                    parse_mode="Markdown")
                photo.close()
            elif 27 <= total_score <= 29:
                result_message += "–ì–∏–º–∞–ª–∞–π—Å–∫–∏–π –ú–µ–¥–≤–µ–¥—å"
                photo = open('Foto/medwed.jpg', 'rb')
                self.bot.send_photo(chat_id, photo,
                                    caption=result_message + f" –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ /quiz. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã [–ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ]({url})",
                                    parse_mode="Markdown")
                photo.close()
            elif 30 <= total_score <= 32:
                result_message += "–ß–µ—Ä–Ω–æ—à–µ–π–Ω–∞—è –ö–æ–±—Ä–∞"
                photo = open('Foto/kobra.jpg', 'rb')
                self.bot.send_photo(chat_id, photo,
                                    caption=result_message + f" –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ /quiz. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã [–ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ]({url})",
                                    parse_mode="Markdown")
                photo.close()
            elif 33 <= total_score <= 35:
                result_message += "–ú–æ–Ω–≥–æ–ª—å—Å–∫–∞—è –ñ–∞–±–∞"
                photo = open('Foto/zhaba.jpg', 'rb')
                self.bot.send_photo(chat_id, photo,
                                    caption=result_message + f" –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ /quiz. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã [–ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ]({url})",
                                    parse_mode="Markdown")
                photo.close()
            elif 36 <= total_score <= 38:
                result_message += "–ü–æ–ª—è—Ä–Ω—ã–π –í–æ–ª–∫"
                photo = open('Foto/wolk.jpg', 'rb')
                self.bot.send_photo(chat_id, photo,
                                    caption=result_message + f" –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ /quiz. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã [–ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ]({url})",
                                    parse_mode="Markdown")
                photo.close()
            elif 39 <= total_score <= 41:
                result_message += "–ò–Ω–¥–∏–π—Å–∫–∏–π –õ–µ–≤"
                photo = open('Foto/lew.jpg', 'rb')
                self.bot.send_photo(chat_id, photo,
                                    caption=result_message + f" –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ /quiz. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã [–ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ]({url})",
                                    parse_mode="Markdown")
                photo.close()
            elif 42 <= total_score <= 45:
                result_message += "–ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π –ó–µ–ª–µ–Ω–æ-–ö—Ä–∞—Å–Ω—ã–π –ü–æ–ø—É–≥–∞–π"
                photo = open('Foto/popugai.jpg', 'rb')
                self.bot.send_photo(chat_id, photo,
                                    caption=result_message + f" –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ /quiz. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã [–ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ]({url})",
                                    parse_mode="Markdown")
                photo.close()
            elif 46 <= total_score <= 48:
                result_message += "–ó–µ–±—Ä–∞ –ì—Ä–µ–≤–∏"
                photo = open('Foto/zebra.jpg', 'rb')
                self.bot.send_photo(chat_id, photo,
                                    caption=result_message + f" –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ /quiz. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã [–ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ]({url})",
                                    parse_mode="Markdown")
                photo.close()
            elif 49 <= total_score <= 51:
                result_message += "–¢—É–ø–æ—Ä—ã–ª—ã–π –ö—Ä–æ–∫–æ–¥–∏–ª"
                photo = open('Foto/croko.jpg', 'rb')
                self.bot.send_photo(chat_id, photo,
                                    caption=result_message + f" –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ /quiz. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã [–ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ]({url})",
                                    parse_mode="Markdown")
                photo.close()
            elif 52 <= total_score <= 54:
                result_message += "–ü–∞–ø—É–∞–Ω—Å–∫–∏–π –ü–∏–Ω–≥–≤–∏–Ω"
                photo = open('Foto/pingwin.jpg', 'rb')
                self.bot.send_photo(chat_id, photo,
                                    caption=result_message + f" –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ /quiz. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã [–ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ]({url})",
                                    parse_mode="Markdown")
                photo.close()
            self.send_try_again_button(chat_id)

        else:
            self.send_next_question(chat_id)
            pass


    def share_result_on_social_media(self, chat_id, result_text, result_image_path, result_sticker_path):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        self.bot.send_message(chat_id, result_text)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with open(result_image_path, 'rb') as photo:
            self.bot.send_photo(chat_id, photo)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –≤–∏–¥–µ —Å—Ç–∏–∫–µ—Ä–∞
        with open(result_sticker_path, 'rb') as sticker:
            self.bot.send_sticker(chat_id, sticker)

    def create_bot_link(self):
        bot_username = self.bot.get_me().username
        return f"https://t.me/{bot_username}"

    def run(self):
        self.start()

        @self.bot.callback_query_handler(func=lambda call: call.data == 'try_again')
        def try_again_handler(call):
            chat_id = call.message.chat.id
            self.bot.delete_message(chat_id, call.message.message_id)
            self.bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
            self.quiz_started = True
            self.user_responses = []
            self.send_next_question(chat_id)

        @self.bot.callback_query_handler(func=lambda call: call.data == 'contact_employee')
        def contact_employee_handler(call):
            employee_email = "employee@example.com"
            employee_phone = "12345"
            contact_info_message = f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º:\n" \
                                   f"–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {employee_email}\n" \
                                   f"–¢–µ–ª–µ—Ñ–æ–Ω: {employee_phone}"
            self.bot.send_message(call.message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. "
                                                        "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.")
            self.bot.send_message(call.message.chat.id, contact_info_message)

        self.bot.polling()

class QuizError(Exception):
    pass

if __name__ == "__main__":
    bot = QuizBot(KEY, 'databaseofquestions.json')
    bot.run()